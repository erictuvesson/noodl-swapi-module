{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS,gBAAgB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;ACvMO;;;;;;;;;;;;;;;;;ACAA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC3FA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNmD;AACjB;AACQ;AAC1C,iBAAiB,wDAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iBAAiB,wDAAgB;AACjC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gBAAgB,wDAAgB;AAChC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA,kCAAkC,GAAG,MAAM,iDAAiD;AAC5F,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAkB,wDAAgB;AAClC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAkB,wDAAgB;AAClC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,qCAAqC,GAAG;AACxC;AACA;AACA,kCAAkC,GAAG,MAAM,iDAAiD;AAC5F,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mBAAmB,wDAAgB;AACnC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAkB,wDAAgB;AAClC;AACA;AACA;AACA;AACA,sBAAsB,2DAAmB;AACzC,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,sCAAsC,GAAG;AACzC;AACA;AACA,kCAAkC,GAAG,MAAM,iDAAiD;AAC5F,YAAY,oDAAW,QAAQ,2CAAM;AACrC,yBAAyB,MAAM;AAC/B;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA,+CAA+C,0DAAkB;AACjE;AACA;AACA,+CAA+C,2DAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oBAAoB;AAC9C;AACA,+DAA+D,OAAO,KAAK,WAAW;AACtF;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0DAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://swapi/./node_modules/@noodl/noodl-sdk/index.js","webpack://swapi/./src/config.ts","webpack://swapi/./src/helper.ts","webpack://swapi/webpack/bootstrap","webpack://swapi/webpack/runtime/compat get default export","webpack://swapi/webpack/runtime/define property getters","webpack://swapi/webpack/runtime/hasOwnProperty shorthand","webpack://swapi/webpack/runtime/make namespace object","webpack://swapi/./src/index.ts"],"sourcesContent":["const _colors = {\n    \"purple\":\"component\",\n    \"green\":\"data\",\n    \"default\":\"default\",\n    \"grey\":\"default\"\n}\n\nNoodl.defineNode = function(def) {\n    const _def = {};\n\n    _def.name = def.name;\n    _def.displayNodeName = def.displayName;\n    _def.usePortAsLabel = def.useInputAsLabel;\n    _def.color = _colors[def.color || 'default'];\n    _def.category = def.category || 'Modules';\n    _def.getInspectInfo = def.getInspectInfo;\n    _def.docs = def.docs;\n    \n    _def.initialize = function() {\n        this.inputs = {};\n        var _outputs = this.outputs = {};\n        var _this = this;\n\n        // Function for quickly setting outputs\n        this.setOutputs = function(o) {\n            for(var key in o) {\n                _outputs[key] = o[key];\n                _this.flagOutputDirty(key);\n            }\n        }\n\n        // Sending warnings\n        this.clearWarnings = (function() {\n            if(this.context.editorConnection && this.nodeScope && this.nodeScope.componentOwner)\n                this.context.editorConnection.clearWarnings(this.nodeScope.componentOwner.name, this.id);\n        }).bind(this);\n\n        this.sendWarning = (function(name,message) {\n            if(this.context.editorConnection && this.nodeScope && this.nodeScope.componentOwner)\n                this.context.editorConnection.sendWarning(this.nodeScope.componentOwner.name, this.id, name, {\n                    message: message\n                });\n        }).bind(this);\n\n        if(typeof def.initialize === 'function')\n            def.initialize.apply(this);\n    }\n    _def.inputs = {};\n    _def.outputs = {};\n\n    for(var key in def.inputs) {\n        _def.inputs[key] = {\n            type:(typeof def.inputs[key] === 'object')?def.inputs[key].type:def.inputs[key],\n            displayName:(typeof def.inputs[key] === 'object')?def.inputs[key].displayName:undefined,\n            group:(typeof def.inputs[key] === 'object')?def.inputs[key].group:undefined,\n            default:(typeof def.inputs[key] === 'object')?def.inputs[key].default:undefined,\n            set:(function() { const _key = key; return function(value) {\n                this.inputs[_key] = value;\n                if(def.changed && typeof def.changed[_key] === 'function') {\n                    def.changed[_key].apply(this,[value]);\n                }\n            }})()\n        }\n    }\n\n    for(var key in def.signals) {\n        _def.inputs[key] = {\n            type:'signal',\n            displayName:(typeof def.signals[key] === 'object')?def.signals[key].displayName:undefined,\n            group:(typeof def.signals[key] === 'object')?def.signals[key].group:undefined,\n            valueChangedToTrue:(function() { const _key = key; return function() {\n                const _fn = (typeof def.signals[_key] === 'object')?def.signals[_key].signal:def.signals[_key]\n                if(typeof _fn === 'function') {\n                    this.scheduleAfterInputsHaveUpdated(() => {\n                        _fn.apply(this);\n                    }) \n                }\n            }})()\n        }\n    }\n\n    for(var key in def.outputs) {\n        if(def.outputs[key] === 'signal') {\n            _def.outputs[key] = {\n                type:'signal',\n            }\n        }\n        else {\n            _def.outputs[key] = {\n                type:(typeof def.outputs[key] === 'object')?def.outputs[key].type:def.outputs[key],\n                displayName:(typeof def.outputs[key] === 'object')?def.outputs[key].displayName:undefined,\n                group:(typeof def.outputs[key] === 'object')?def.outputs[key].group:undefined,\n                getter:(function() { const _key = key; return function() {\n                    return this.outputs[_key];\n                }})()\n            }\n        }\n    }\n\n    _def.methods = _def.prototypeExtensions = {};\n    for(var key in def.methods) {\n        _def.prototypeExtensions[key] = def.methods[key];\n    }\n    if(_def.methods.onNodeDeleted) { // Override the onNodeDeleted if required\n        _def.methods._onNodeDeleted = function() {\n            this.__proto__.__proto__._onNodeDeleted.call(this);\n            _def.methods.onNodeDeleted.value.call(this);\n        }\n    }\n\n    return {node:_def,setup:def.setup};\n}\n\nNoodl.defineCollectionNode = function(def) {\n    const _def = {\n        name:def.name,\n        category:def.category,\n        color:'data',\n        inputs:def.inputs,\n        outputs:Object.assign({\n            Items:'array',\n            'Fetch Started':'signal',\n            'Fetch Completed':'signal'\n        },def.outputs||{}),\n        signals:Object.assign({\n            Fetch:function() {\n                var _this = this;\n                this.sendSignalOnOutput('Fetch Started');\n                var a = def.fetch.call(this,function() {\n                    _this.sendSignalOnOutput('Fetch Completed');\n                });\n                this.setOutputs({\n                    Items:a\n                })\n            }\n        },def.signals||{})\n    }\n\n    return Noodl.defineNode(_def);\n}\n\nNoodl.defineModelNode = function(def) {\n    const _def = {\n        name:def.name,\n        category:def.category,\n        color:'data',\n        inputs:{\n            Id:'string'\n        },\n        outputs:{\n            Fetched:'signal'\n        },\n        changed:{\n            Id:function(value) {\n                if(this._object && this._changeListener)\n                    this._object.off('change',this._changeListener)\n                \n                this._object = Noodl.Object.get(value);\n                this._changeListener = (name,value) => {\n                    const _o = {}\n                    _o[name] = value;\n                    this.setOutputs(_o)\n                }\n                this._object.on('change',this._changeListener)\n\n                this.setOutputs(this._object.data);\n                this.sendSignalOnOutput('Fetched');\n            }\n        },\n        initialize:function() {\n\n        }\n    }\n\n    for(var key in def.properties) {\n        _def.inputs[key] = def.properties[key];\n        _def.outputs[key] = def.properties[key];\n        _def.changed[key] = (function() { const _key = key; return function(value) {\n            if(!this._object) return;\n            this._object.set(_key,value);\n        }})()\n    }\n \n    return Noodl.defineNode(_def);\n}\n\nNoodl.defineReactNode = function(def) {\n    var _def = Noodl.defineNode(def);\n\n    _def.node.getReactComponent = def.getReactComponent;\n    _def.node.inputProps = def.inputProps;\n    _def.node.inputCss = def.inputCss;\n    _def.node.outputProps = def.outputProps;\n    _def.node.setup = def.setup;\n    _def.node.frame = def.frame;\n\n    return _def.node;\n}\n\nmodule.exports = Noodl;","export const domain = 'https://swapi.dev';\r\n","export function makeRequest(method, url, queryParameters = undefined, body = undefined) {\r\n    return new Promise(function (resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        let finalUrl = url;\r\n        if (queryParameters) {\r\n            const urlParams = new URLSearchParams(queryParameters).toString();\r\n            if (urlParams.length > 0) {\r\n                finalUrl += \"?\" + urlParams;\r\n            }\r\n        }\r\n        xhr.open(method, finalUrl);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.setRequestHeader('Accept', 'application/json');\r\n        xhr.onload = function () {\r\n            if (this.status >= 200 && this.status < 300) {\r\n                resolve({\r\n                    content: xhr.responseText,\r\n                    json: updateResponse(JSON.parse(xhr.responseText)),\r\n                    xhr\r\n                });\r\n            }\r\n            else {\r\n                reject({\r\n                    status: this.status,\r\n                    statusText: xhr.statusText\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            reject({\r\n                status: this.status,\r\n                statusText: xhr.statusText\r\n            });\r\n        };\r\n        xhr.send(JSON.stringify(body));\r\n    });\r\n}\r\nexport function capitalize(value) {\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n}\r\nfunction extractNumber(value) {\r\n    return Number(value.match(/\\d+/g).join(''));\r\n}\r\n/**\r\n * This is a very very bad function,\r\n * but since everything is generated this was\r\n * a quick solution to get it working.\r\n *\r\n * @param json\r\n */\r\nfunction updateResponse(json) {\r\n    json = updatePartialResponse(json);\r\n    if (json.results) {\r\n        // @ts-ignore\r\n        json.results = json.results.map(x => updatePartialResponse(x));\r\n    }\r\n    return json;\r\n}\r\nfunction updatePartialResponse(value) {\r\n    if (value.url) {\r\n        value.id = extractNumber(value.url);\r\n    }\r\n    // homeworld\r\n    if (Array.isArray(value.characters) && value.characters.length > 0) {\r\n        value.characters = value.characters.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.planets) && value.planets.length > 0) {\r\n        value.planets = value.planets.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.species) && value.species.length > 0) {\r\n        value.species = value.species.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.vehicles) && value.vehicles.length > 0) {\r\n        value.vehicles = value.vehicles.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.starships) && value.starships.length > 0) {\r\n        value.starships = value.starships.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.people) && value.people.length > 0) {\r\n        value.people = value.people.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.residents) && value.residents.length > 0) {\r\n        value.residents = value.residents.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.pilots) && value.pilots.length > 0) {\r\n        value.pilots = value.pilots.map(extractNumber);\r\n    }\r\n    if (Array.isArray(value.films) && value.films.length > 0) {\r\n        value.films = value.films.map(extractNumber);\r\n    }\r\n    return value;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { makeRequest, capitalize } from './helper';\r\nimport { domain } from './config';\r\nimport * as Noodl from '@noodl/noodl-sdk';\r\nconst debugLog = Noodl.defineNode({\r\n    category: 'Debug',\r\n    name: 'Log',\r\n    color: 'purple',\r\n    inputs: {\r\n        Message: {\r\n            group: 'Input',\r\n            type: '*'\r\n        },\r\n    },\r\n    signals: {\r\n        LogMessage: function () {\r\n            const input = this.inputs.Message;\r\n            console.dir(input);\r\n        }\r\n    }\r\n});\r\nconst getFilms = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get all films',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {\r\n        Search: {\r\n            group: 'Query',\r\n            type: 'string'\r\n        },\r\n    },\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: count\r\n         * type: integer\r\n         **/\r\n        Count: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: next\r\n         * type: integer\r\n         **/\r\n        Next: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: previous\r\n         * type: integer\r\n         **/\r\n        Previous: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: results\r\n         * type: array\r\n         **/\r\n        Results: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/films';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            if (this.inputs['Search']) {\r\n                queryParameters['search'] = this.inputs['Search'];\r\n            }\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nconst getFilm = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get film by id',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {\r\n        Id: {\r\n            group: 'Query',\r\n            type: 'string'\r\n        },\r\n    },\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         * The title of this film\r\n         *\r\n         * name: title\r\n         * type: string\r\n         **/\r\n        Title: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * The episode number of this film.\r\n         *\r\n         * name: episode_id\r\n         * type: integer\r\n         **/\r\n        Episode_id: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         * The opening paragraphs at the beginning of this film.\r\n         *\r\n         * name: opening_crawl\r\n         * type: string\r\n         **/\r\n        Opening_crawl: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * The name of the director of this film.\r\n         *\r\n         * name: director\r\n         * type: string\r\n         **/\r\n        Director: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * The name(s) of the producer(s) of this film. Comma separated.\r\n         *\r\n         * name: producer\r\n         * type: string\r\n         **/\r\n        Producer: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * The ISO 8601 date format of film release at original creator country.\r\n         *\r\n         * name: release_date\r\n         * type: string\r\n         **/\r\n        Release_date: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * An array of species resource URLs that are in this film.\r\n         *\r\n         * name: species\r\n         * type: array\r\n         **/\r\n        Species: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n        /**\r\n         * An array of starship resource URLs that are in this film.\r\n         *\r\n         * name: starships\r\n         * type: array\r\n         **/\r\n        Starships: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n        /**\r\n         * An array of vehicle resource URLs that are in this film.\r\n         *\r\n         * name: vehicles\r\n         * type: array\r\n         **/\r\n        Vehicles: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n        /**\r\n         * An array of people resource URLs that are in this film.\r\n         *\r\n         * name: characters\r\n         * type: array\r\n         **/\r\n        Characters: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n        /**\r\n         * An array of planet resource URLs that are in this film.\r\n         *\r\n         * name: planets\r\n         * type: array\r\n         **/\r\n        Planets: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n        /**\r\n         * the hypermedia URL of this resource.\r\n         *\r\n         * name: url\r\n         * type: string\r\n         **/\r\n        Url: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * Extracted from url.\r\n         *\r\n         * name: id\r\n         * type: number\r\n         **/\r\n        Id: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         * the ISO 8601 date format of the time that this resource was created.\r\n         *\r\n         * name: created\r\n         * type: string\r\n         **/\r\n        Created: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * the ISO 8601 date format of the time that this resource was edited.\r\n         *\r\n         * name: edited\r\n         * type: string\r\n         **/\r\n        Edited: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/films/{id}';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            path = path.replace('{id}', `${encodeURIComponent(this.inputs['Id']).toString()}`);\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nconst getPeople = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get all people',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {},\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: count\r\n         * type: integer\r\n         **/\r\n        Count: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: next\r\n         * type: integer\r\n         **/\r\n        Next: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: previous\r\n         * type: integer\r\n         **/\r\n        Previous: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: results\r\n         * type: array\r\n         **/\r\n        Results: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/people';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nconst getPerson = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get person by id',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {\r\n        Id: {\r\n            group: 'Query',\r\n            type: 'string'\r\n        },\r\n    },\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         * Unique identifier representing a specific person for a given character persona.\r\n         *\r\n         * name: id\r\n         * type: number\r\n         **/\r\n        Id: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         * Display name of person.\r\n         *\r\n         * name: name\r\n         * type: string\r\n         **/\r\n        Name: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n        /**\r\n         * Indetifier of the planet the person is from.\r\n         *\r\n         * name: homeWorldId\r\n         * type: integer\r\n         **/\r\n        HomeWorldId: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         * Which side or team the person has an allegiance.\r\n         *\r\n         * name: allegiance\r\n         * type: string\r\n         **/\r\n        Allegiance: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/people/{id}';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            path = path.replace('{id}', `${encodeURIComponent(this.inputs['Id']).toString()}`);\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nconst getPlanets = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get all planets',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {},\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: count\r\n         * type: integer\r\n         **/\r\n        Count: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: next\r\n         * type: integer\r\n         **/\r\n        Next: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: previous\r\n         * type: integer\r\n         **/\r\n        Previous: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         *\r\n         *\r\n         * name: results\r\n         * type: array\r\n         **/\r\n        Results: {\r\n            group: 'Response',\r\n            type: 'array'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/planets';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nconst getPlanet = Noodl.defineNode({\r\n    category: 'Star Wars API',\r\n    name: 'Get planet by id',\r\n    color: 'green',\r\n    initialize: function () {\r\n        this.result = Noodl.Object.create(null);\r\n    },\r\n    inputs: {\r\n        Id: {\r\n            group: 'Query',\r\n            type: 'string'\r\n        },\r\n    },\r\n    outputs: {\r\n        /**\r\n         *\r\n         **/\r\n        Fetched: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         *\r\n         **/\r\n        Error: {\r\n            group: 'Events',\r\n            type: 'signal'\r\n        },\r\n        /**\r\n         * Unique identifier representing a specific planet.\r\n         *\r\n         * name: id\r\n         * type: integer\r\n         **/\r\n        Id: {\r\n            group: 'Response',\r\n            type: 'number'\r\n        },\r\n        /**\r\n         * Display name of planet.\r\n         *\r\n         * name: name\r\n         * type: string\r\n         **/\r\n        Name: {\r\n            group: 'Response',\r\n            type: 'string'\r\n        },\r\n    },\r\n    signals: {\r\n        Fetch: function () {\r\n            let path = '/api/planets/{id}';\r\n            let body = null;\r\n            let queryParameters = {};\r\n            path = path.replace('{id}', `${encodeURIComponent(this.inputs['Id']).toString()}`);\r\n            makeRequest('GET', domain + path, queryParameters, body)\r\n                .then(({ json }) => {\r\n                for (const key of Object.keys(json)) {\r\n                    // Capitalize to make it more user friendly\r\n                    const newKey = capitalize(key);\r\n                    // Check if we have something that is not registered\r\n                    // then send a warning\r\n                    if (!this.hasOutput(newKey)) {\r\n                        this.sendWarning('swapi-warning', `Output pin is missing '${newKey}'`);\r\n                    }\r\n                    // Update the output pin\r\n                    // @ts-ignore - bad solution, but nothing we should worry about\r\n                    const newOutput = json[key];\r\n                    if (Array.isArray(newOutput)) {\r\n                        this.outputs[newKey] = Noodl.Array.create(newOutput);\r\n                    }\r\n                    else if (typeof newOutput === 'object') {\r\n                        this.outputs[newKey] = Noodl.Object.create(newOutput);\r\n                    }\r\n                    else {\r\n                        this.outputs[newKey] = newOutput;\r\n                    }\r\n                    // Flag that the output have been changed\r\n                    this.flagOutputDirty(newKey);\r\n                }\r\n                // Send the signal that we just recieved a response\r\n                this.sendSignalOnOutput('Fetched');\r\n            })\r\n                .catch(({ status, statusText }) => {\r\n                // Send a warning and a signal that we got a http error\r\n                this.sendWarning('swapi-error', `Http Error (${status}): ${statusText}`);\r\n                this.sendSignalOnOutput('Error');\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        getResult() {\r\n            return this.result;\r\n        }\r\n    }\r\n});\r\nNoodl.defineModule({\r\n    nodes: [\r\n        debugLog,\r\n        getFilms,\r\n        getFilm,\r\n        getPeople,\r\n        getPerson,\r\n        getPlanets,\r\n        getPlanet,\r\n    ],\r\n    setup() {\r\n        // this is called once on startup\r\n    }\r\n});\r\n"],"names":[],"sourceRoot":""}